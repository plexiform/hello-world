(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{NB2e:function(e,a,n){"use strict";n.r(a),n.d(a,"_frontmatter",(function(){return p})),n.d(a,"default",(function(){return b}));var t=n("wx14"),c=n("zLVn"),s=(n("q1tI"),n("7ljp")),o=n("uWAb"),p=(n("qKvR"),{title:"mutual",date:null,tags:["complex_data"],published:!0}),m={_frontmatter:p};function b(e){var a=e.components,n=Object(c.a)(e,["components"]);return Object(s.b)("wrapper",Object(t.a)({},m,n,{components:a,mdxType:"MDXLayout"}),Object(s.b)(o.a,{text:"Surely this joke isn't overused.",mdxType:"MyPop"},"A self-referencing function is a function that refers to itself.")," It'll operate on a list that itself contains more lists (e.g. ListOfColor is either `empty` or `cons Color ListOfColor`). Through the principle of induction, we can be certain that the sub-lists will yield to the function just the same as their parent lists, until they arrive at some base case. These lists are horizontal.",Object(s.b)("p",null,'Mutual reference means two data types that refer to each other. For example, if "ListOfElement" contains type "Element," and type "Element" contains type "ListOfElement." This allows the cycle between these two to be arbitrarily deep, or vertical.'),Object(s.b)("p",null,"It can be helpful to draw out the connections between data types. We begin by drawing up data definitions and their corresponding templates for our mutually recursive functions."),Object(s.b)("div",{className:"gatsby-highlight","data-language":"scheme"},Object(s.b)("pre",{parentName:"div",className:"language-scheme"},Object(s.b)("code",{parentName:"pre",className:"language-scheme"},Object(s.b)("span",{parentName:"code",className:"token comment"},";; Data definitions"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"define-struct")," elt ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"name")," data subs",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; Element is (make-elt String Integer ListOfElement)"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; interpretation: an element in the file system that has a name and"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; either data or subs. If data is 0, then subs is treated as a list"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; of sub elements. If data isn't 0, then subs is ignored."),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; ListOfElement is one of"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; - empty"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; - (cons Element ListOfElement)"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"fn-for-element")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n    ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"...")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-name")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n         ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-data")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n         ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"fn-for-loe")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-subs")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"fn-for-loe")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"cond")," [",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"empty?")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"..."),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"]\n        [else\n          ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"...")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"fn-for-element")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"first")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n               ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"fn-for-loe")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"rest")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"]",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")))),Object(s.b)("hr",null),"If a tree that has some elements in it, but each element may contain further lists of elements, that's an arbitrary arity tree. There will be a back-and-forth  between the element and its list of elements (and vice versa) until we arrive at our desired result.",Object(s.b)("p",null,"For example,"),Object(s.b)("div",{className:"gatsby-highlight","data-language":"scheme"},Object(s.b)("pre",{parentName:"div",className:"language-scheme"},Object(s.b)("code",{parentName:"pre",className:"language-scheme"},Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," F1 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"make-elt")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F1"')," ",Object(s.b)("span",{parentName:"code",className:"token number"},"1")," empty",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," F2 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"make-elt")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F2"')," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2")," empty",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," F3 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"make-elt")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F3"')," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3")," empty",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," D4 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"make-elt")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"D4"')," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"list")," F1 F2",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," D5 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"make-elt")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"D5"')," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"list")," F3",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," D6 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"make-elt")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"D6"')," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"list")," D4 D5",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")))),Object(s.b)("p",null,'Elements can be either "F\'s" (files) or "D\'s" (directories). Directories have "0" for data, indicating they have no data, but that they do have sub-elements. For example, D4 contains files F1 and F2. Note that the files are the very bottom of the tree, and their data are integers (1, 2, 3).'),Object(s.b)("p",null,"If we want to sum all the data in a tree represented as above, we can do so as follows"),Object(s.b)("div",{className:"gatsby-highlight","data-language":"scheme"},Object(s.b)("pre",{parentName:"div",className:"language-scheme"},Object(s.b)("code",{parentName:"pre",className:"language-scheme"},Object(s.b)("span",{parentName:"code",className:"token comment"},";; Element -> Integer"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; produce sum of all data in element and its sub-lists of elements"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--loe")," empty",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"  ",Object(s.b)("span",{parentName:"code",className:"token comment"},";; if there's nothing else in the list, there's nothing more to add, i.e. 0"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--element")," F1",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--element")," D5",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--element")," D4",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"1")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--element")," D6",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"1")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--element")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n      ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"zero?")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-data")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"          ",Object(s.b)("span",{parentName:"code",className:"token comment"},";; 0 indicates there's no data, but there is a list"),"\n          ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--loe")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-subs")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"  ",Object(s.b)("span",{parentName:"code",className:"token comment"},";; since there's a list, call the ListOfElement function on it -- it can then add what remains in elt-subs"),"\n          ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-data")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"                ",Object(s.b)("span",{parentName:"code",className:"token comment"},";; If we've reached the file data, there's no further searching to be done, since the files are at the bottom of the tree"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--loe")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"cond")," [",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"empty?")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," 0]                    ",Object(s.b)("span",{parentName:"code",className:"token comment"},";; list is empty, nada to add"),"\n        [else\n         ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token operator"},"+")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--element")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"first")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"  ",Object(s.b)("span",{parentName:"code",className:"token comment"},";; list isn't empty, meaning it has either a file or further directories. If it has file, we get to"),"\n                                            ",Object(s.b)("span",{parentName:"code",className:"token comment"},";; add the file's data. If it has more subdirectories, we'll recurse through them, \"trusting the natural/mutual recursion\""),"\n            ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"sum-data--loe")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"rest")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"]",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")))),Object(s.b)("br",null),Object(s.b)("h3",null,"Backtracking Search:"),Object(s.b)("div",{className:"gatsby-highlight","data-language":"scheme"},Object(s.b)("pre",{parentName:"div",className:"language-scheme"},Object(s.b)("code",{parentName:"pre",className:"language-scheme"},Object(s.b)("span",{parentName:"code",className:"token comment"},";; String Element -> Integer or false"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; String ListOfElement -> Integer or false"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";; search a tree for an element with the given name; produce the data if found, false otherwise"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--loe")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F3"')," empty",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," false",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F1"')," F1",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"1"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--loe")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F2"')," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"cons")," F1 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"cons")," F2 empty",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--loe")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F3"')," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"cons")," F1 ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"cons")," F2 empty",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," false",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F3"')," D4",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," false",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F2"')," D4",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"2"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"F3"')," D5",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"3"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"check-expect")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," ",Object(s.b)("span",{parentName:"code",className:"token string"},'"D6"')," D6",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.b)("span",{parentName:"code",className:"token number"},"0"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";(define (find--element str elt) #false) ;stubs"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},";(define (find--element str loe) #false) "),"\n\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," str e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"string=?")," str ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-name")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n      ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-data")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n      ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--loe")," str ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"elt-subs")," e",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"#| If the string equals the current name, then we've found it,\nend of. Otherwise we begin to check the list.\n|#"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"define")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--loe")," str loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n  ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"cond")," [",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"empty?")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")")," false]\n        [else\n         ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token keyword"},"if"),"  ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token builtin"},"not")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"false?")," ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," str ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"first")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n              ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--element")," str ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"first")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n              ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"find--loe")," str ",Object(s.b)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.b)("span",{parentName:"code",className:"token function"},"rest")," loe",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"]",Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.b)("span",{parentName:"code",className:"token punctuation"},")"),"\n\n",Object(s.b)("span",{parentName:"code",className:"token comment"},"#|\nIf we reach the an empty list, our search has come up short.\nIt coming up short means to yield false.\n\nIf we didn't reach an empty list, we check the first element.\nWe trust our mutual recursion and let our find--element\nfunction return either false or something else.\n\nIf it doesn't return false, we found our element.\n\nIf it does, we perform the same routine on the rest of the list.\n\n\n|#")))))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-what-a-racket-mdx-71d13717ce56ea461b6b.js.map