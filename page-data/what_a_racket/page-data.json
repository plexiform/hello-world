{"componentChunkName":"component---src-templates-blog-post-js","path":"/what_a_racket/","result":{"data":{"markdownRemark":{"html":"<p>A self-referencing function is just that. It'll operate on a list that itself contains more lists (e.g. ListOfColor is either <code class=\"language-text\">empty</code> or <code class=\"language-text\">cons Color ListOfColor</code>). Through the principle of induction, we can be certain that the sub-lists will yield to the function just the same as their parent lists, until they arrive at some base case. These lists are horizontal.</p>\n<p>Mutual reference means two data types that refer to each other. For example, if \"ListOfElement\" contains type \"Element,\" and type \"Element\" contains type \"ListOfElement.\" This allows the cycle between these two to be arbitrarily deep.</p>\n<p>It can be helpful to draw out the connections between data types. We begin by drawing up data definitions and their corresponding templates for our mutually recursive functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token comment\">;; Data definitions:</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">define-struct</span> elt <span class=\"token punctuation\">(</span><span class=\"token function\">name</span> data subs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;; Element is (make-elt String Integer ListOfElement)</span>\n<span class=\"token comment\">;; interpretation: an element in the file system that has a name and</span>\n<span class=\"token comment\">;; either data or subs. If data is 0, then subs is treated as a list</span>\n<span class=\"token comment\">;; of sub elements. If data isn't 0, then subs is ignored.</span>\n\n<span class=\"token comment\">;; ListOfElement is one of:</span>\n<span class=\"token comment\">;; - empty</span>\n<span class=\"token comment\">;; - (cons Element ListOfElement)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fn-for-element</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">...</span> <span class=\"token punctuation\">(</span><span class=\"token function\">elt-name</span> e<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">elt-data</span> e<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">fn-for-loe</span> <span class=\"token punctuation\">(</span><span class=\"token function\">elt-subs</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fn-for-loe</span> loe<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span> [<span class=\"token punctuation\">(</span><span class=\"token function\">empty?</span> loe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">...</span><span class=\"token punctuation\">)</span>]\n        [else\n          <span class=\"token punctuation\">(</span><span class=\"token function\">...</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fn-for-element</span> <span class=\"token punctuation\">(</span><span class=\"token function\">first</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">fn-for-loe</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rest</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If a tree that has some elements in it, but each element may contain further lists of elements, that's an arbitrary arity tree. There will be a back-and-forth  between the element and its list of elements (and vice versa) until we arrive at our desired result. </p>\n<p>For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> F1 <span class=\"token punctuation\">(</span><span class=\"token function\">make-elt</span> <span class=\"token string\">\"F1\"</span> <span class=\"token number\">1</span> empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> F2 <span class=\"token punctuation\">(</span><span class=\"token function\">make-elt</span> <span class=\"token string\">\"F2\"</span> <span class=\"token number\">2</span> empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> F3 <span class=\"token punctuation\">(</span><span class=\"token function\">make-elt</span> <span class=\"token string\">\"F3\"</span> <span class=\"token number\">3</span> empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> D4 <span class=\"token punctuation\">(</span><span class=\"token function\">make-elt</span> <span class=\"token string\">\"D4\"</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> F1 F2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> D5 <span class=\"token punctuation\">(</span><span class=\"token function\">make-elt</span> <span class=\"token string\">\"D5\"</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> F3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> D6 <span class=\"token punctuation\">(</span><span class=\"token function\">make-elt</span> <span class=\"token string\">\"D6\"</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> D4 D5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Elements can be either \"F's\" (files) or \"D's\" (directories). Directories have \"0\" for data, indicating they have no data, but that they do have sub-elements. For example, D4 contains files F1 and F2. Note that the files are the very bottom of the tree, and their data are integers (1, 2, 3).</p>\n<p>If we want to sum all the data in a tree represented as above, we can do so as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token comment\">;; Element -> Integer</span>\n<span class=\"token comment\">;; produce sum of all data in element and its sub-lists of elements</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--loe</span> empty<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">;; if there's nothing else in the list, there's nothing more to add, i.e. 0</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--element</span> F1<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--element</span> D5<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--element</span> D4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--element</span> D6<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--element</span> e<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">zero?</span> <span class=\"token punctuation\">(</span><span class=\"token function\">elt-data</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">;; 0 indicates there's no data, but there is a list</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--loe</span> <span class=\"token punctuation\">(</span><span class=\"token function\">elt-subs</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">;; since there's a list, call the ListOfElement function on it -- it can then add what remains in elt-subs</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">elt-data</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">;; If we've reached the file data, there's no further searching to be done, since the files are at the bottom of the tree</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--loe</span> loe<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span> [<span class=\"token punctuation\">(</span><span class=\"token function\">empty?</span> loe<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span>]                    <span class=\"token comment\">;; list is empty, nada to add</span>\n        [else\n         <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--element</span> <span class=\"token punctuation\">(</span><span class=\"token function\">first</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">;; list isn't empty, meaning it has either a file or further directories. If it has file, we get to</span>\n                                            <span class=\"token comment\">;; add the file's data. If it has more subdirectories, we'll recurse through them, \"trusting the natural/mutual recursion\"</span>\n            <span class=\"token punctuation\">(</span><span class=\"token function\">sum-data--loe</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rest</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<h3>Backtracking Search:</h3>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token comment\">;; String Element -> Integer or false</span>\n<span class=\"token comment\">;; String ListOfElement -> Integer or false</span>\n<span class=\"token comment\">;; search a tree for an element with the given name; produce the data if found, false otherwise</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--loe</span> <span class=\"token string\">\"F3\"</span> empty<span class=\"token punctuation\">)</span> false<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> <span class=\"token string\">\"F1\"</span> F1<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--loe</span> <span class=\"token string\">\"F2\"</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> F1 <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> F2 empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--loe</span> <span class=\"token string\">\"F3\"</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> F1 <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> F2 empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> false<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> <span class=\"token string\">\"F3\"</span> D4<span class=\"token punctuation\">)</span> false<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> <span class=\"token string\">\"F2\"</span> D4<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> <span class=\"token string\">\"F3\"</span> D5<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">check-expect</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> <span class=\"token string\">\"D6\"</span> D6<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;(define (find--element str elt) #false) ;stubs</span>\n<span class=\"token comment\">;(define (find--element str loe) #false) </span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> str e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string=?</span> str <span class=\"token punctuation\">(</span><span class=\"token function\">elt-name</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">elt-data</span> e<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">find--loe</span> str <span class=\"token punctuation\">(</span><span class=\"token function\">elt-subs</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n#| If the string equals the current name, then we<span class=\"token string\">'ve</span> found it,\nend of. Otherwise we begin to check the list.\n|#\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--loe</span> str loe<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span> [<span class=\"token punctuation\">(</span><span class=\"token function\">empty?</span> loe<span class=\"token punctuation\">)</span> false]\n        [else\n         <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span>  <span class=\"token punctuation\">(</span><span class=\"token function\">not</span> <span class=\"token punctuation\">(</span><span class=\"token function\">false?</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> str <span class=\"token punctuation\">(</span><span class=\"token function\">first</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">(</span><span class=\"token function\">find--element</span> str <span class=\"token punctuation\">(</span><span class=\"token function\">first</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">(</span><span class=\"token function\">find--loe</span> str <span class=\"token punctuation\">(</span><span class=\"token function\">rest</span> loe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n#|\nIf we reach the an empty list, our search has come up short.\nIt coming up short means to yield false.\n\nIf we didn<span class=\"token string\">'t</span> reach an empty list, we check the first element.\nWe trust our mutual recursion and let our find--element\nfunction return either false or something else.\n\nIf it doesn<span class=\"token string\">'t</span> return false, we found our element.\n\nIf it does, we perform the same routine on the rest of the list.\n\n\n|#</code></pre></div>","frontmatter":{"title":"Mutual Recursion","tags":["complex_data","cs"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/what_a_racket/"}}}